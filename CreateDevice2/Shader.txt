// HLSL (High Language Shader Level) = C 언어와 유사한 언어
// 정점 쉐이더 (정점의 개수만큼 호출된다.)
// 포지션 p 는 NDC 좌표계여야만 한다

struct VS_OUT
{
	float4 p : SV_POSITION;
	float4 c : COLOR0;
	float2 t : TEXCOORD0; // TEXCOORD0 ~ TEXCOORD15
};

// 정점버퍼에 있는 각 정점을 InputLayout 구조에 따라서 정점 쉐이더에 전달한다.
// 정점쉐이더의 반환은 반드시 SV_POSITION 레지스터(float4 : xyzw)(System Value Position)에 저장되어야 한다.
// 출력타입 float4, 입력 타입 float2, 입력받는 레이아웃명 POSITION, 출력하여 저장하는 레지스터 SV_POSITION
VS_OUT VS( in float3 p : POSITION, in float4 c : COLOR, float2 t : TEX)
{
	VS_OUT v = (VS_OUT)0;
	float1 x = (p.x / 800.0f) * 2.0f - 1.0f;	// 화면좌표계를 NDC 평면으로 변환
	float1 y = -(p.y / 600.0f) * 2.0f - 1.0f;
	v.p = float4(p, 1.0f); // 스위즐링
	v.c = c;
	return v;
}

Texture2D g_txDiffuse : register(t0); // 텍스쳐 레지스터 3번에 텍스쳐가 있다.
SamplerState g_Sample : register(s0); // 샘플러 0번에 있는 샘플러로 텍스쳐 컬러를 읽어라.

// 픽셀 쉐이더 (픽셀의 개수만큼 호출된다.)
// 픽셀쉐이더의 반환은 반드시 SV_TARGET 레지스터(float4 : rgba)에 저장되어야 한다.
float4 PS( VS_OUT v ) : SV_TARGET
{
	float4 texColor = g_txDiffuse.Sample(g_Sample, v.t);
	// texColor.r*v.c.r texColor.g*v.c.g, texColor.b*v.c.b, texColor.a*v.c.a;
	return texColor;
}